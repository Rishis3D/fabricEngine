require PolygonMesh;


function PolygonMesh.extrude!(Xfo xfos[], Vec3 profile[], Boolean close, Boolean setUVs, Float32 maxU, Float32 maxV) {

  if(profile.size() < 2)
    return;
  if(xfos.size() < 2)
    return;

  Size nbSegments = close ? profile.size() : profile.size() - 1;
  Size nbPointRows = xfos.size();
  Size nbQuadRows = nbPointRows - 1;
  
  Size nbPoints = profile.size() * nbPointRows;
  Size firstPoint = this.createPoints(nbPoints);
  for(Size i=0;i<nbPoints;i++) {
    Size row = i / profile.size();
    Size pointIndex = i % profile.size();
    Vec3 pos = xfos[row].transformVector(profile[pointIndex]);
    this.setPointPosition(firstPoint+i, pos);
  }

  Ref<Vec2Attribute> uvs = null;
  if(setUVs)
    uvs = this.getOrCreateVec2Attribute("uvs0");
    
    
  this.beginStructureChanges();

  Size nbQuads = nbSegments * nbQuadRows;
  Size v0, v1, v2, v3;
  Float32 uInc = (1.0 / nbSegments)*maxU;
  Float32 vInc = maxV / nbQuadRows;
  Float32 u,v;
  
  for(Size i=0;i<nbQuads;i++) {
    Size segmentIndex = i % nbSegments;
    Size row = i / nbSegments;
    v = vInc*row;
    u = maxU-(uInc*segmentIndex);

    if(segmentIndex == profile.size() - 1) {
      v0 = (profile.size() * row + segmentIndex) % nbPoints;
      v1 = (profile.size() * row) % nbPoints;
      v2 = (profile.size() * (row+1)) % nbPoints;
      v3 = (profile.size() * (row+1) + segmentIndex) % nbPoints;
    } else {
      v0 = (profile.size() * row + segmentIndex) % nbPoints;
      v1 = (profile.size() * row + segmentIndex + 1) % nbPoints;
      v2 = (profile.size() * (row+1) + segmentIndex + 1) % nbPoints;
      v3 = (profile.size() * (row+1) + segmentIndex) % nbPoints;
    }
    this.addPolygon(firstPoint+v3, firstPoint+v2, firstPoint+v1, firstPoint+v0);
    if(setUVs){
      this.setPolygonAttribute(i, 0, uvs, Vec2(u, v+vInc));
      this.setPolygonAttribute(i, 1, uvs, Vec2(u-uInc, v+vInc));
      this.setPolygonAttribute(i, 2, uvs, Vec2(u-uInc, v));
      this.setPolygonAttribute(i, 3, uvs, Vec2(u, v));
    }
  }

  this.endStructureChanges();
}




